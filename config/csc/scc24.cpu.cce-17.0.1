#!/bin/bash

# ICON
#
# ------------------------------------------
# Copyright (C) 2004-2024, DWD, MPI-M, DKRZ, KIT, ETH, MeteoSwiss
# Contact information: icon-model.org
# See AUTHORS.TXT for a list of authors
# See LICENSES/ for license information
# SPDX-License-Identifier: BSD-3-Clause
# ------------------------------------------

set -eu
unset CDPATH

script_dir=$(cd "$(dirname "$0")"; pwd)
icon_dir=$(cd "${script_dir}/../.."; pwd)

${SINGULARITY_CONTAINER+:} false || {
  cat >&2 <<_EOF
ERROR: this configure wrapper must be run inside a container:
       run '${script_dir}/exec.lumi.container.cce-16.0.1.1 bash' first
_EOF
  exit 1
}

${ICON_CONTAINER_WRAPPER+:} false || {
  cat >&2 <<_EOF
WARNING: environment variable ICON_CONTAINER_WRAPPER providing the container
wrapper command for the runscripts is not set
_EOF
}

modules='PrgEnv-cray cce/17.0.1 craype-x86-rome cray-mpich cray-hdf5 cray-netcdf cray-libsci'

BUILD_ENV="export LOADEDMODULES=""; module load ${modules};export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:/opt/cray/pe/libfabric/1.13.1/lib;"

CC='cc'
CPPFLAGS=
CFLAGS='-g -gdwarf-4'
ICON_CFLAGS='-O3'
ICON_BUNDLED_CFLAGS='-O2'

FC='ftn'
FCFLAGS="-hadd_paren -Ktrap=divz,ovf,inv -hflex_mp=intolerant -hfp1 -hipa0 -hheap_allocate"

# It takes ages (if at all) to compile the following file with optimization
# level other than -O0 (it still takes ~10min if the GPU support is enabled):
ICON_O0_PATH='externals/jsbach/src/base/mo_jsb_process_factory_core.f90'
ICON_O0_FCFLAGS='-O0'

# The compiler fails to compile the following file with the default optimization
# level:
ICON_O1_PATH='src/atm_phy_schemes/mo_cuascn.f90'
ICON_O1_PATH+=':src/atm_phy_schemes/mo_cuflxtends.f90'
ICON_O1_FCFLAGS='-O1'

# We might need compiler diagnostic output for certain source files (to be set
# on the command line when calling this wrapper as an extra argument
# ICON_DIAG_PATH='<file1>:<file2>', where <file1>:<files2> is a colon-separated
# list of relative paths to the files of interest):
ICON_DIAG_FCFLAGS='-hlist=a'

LDFLAGS=

# The compiler does not inject RPATHs to several runtime libraries (e.g.
# libfabric.so and libamdhip64.so), therefore we generate the required flags
# based on the LD_LIBRARY_PATH variable set by the modules that are loaded in
# BUILD_ENV:
extra_rpath_dirs=$(unset LD_LIBRARY_PATH; { set +eu; eval "${BUILD_ENV}"; set -eu; } >/dev/null; echo "${LD_LIBRARY_PATH}")
ICON_LDFLAGS="-Wl,--disable-new-dtags -Wl,-rpath,${extra_rpath_dirs}"

# libstdc++ needed explicitly
LIBS=-lstdc++

# Note that the generated list of flags will contain RPATHs to the custom
# libraries because BUILD_ENV not only loads the modules but also extends the
# LD_LIBRARY_PATH variable for the configure scripts and test suites of the
# bundled libraries to work. Therefore, we configure ICON with --disable-rpaths
# to avoid duplicate RPATH entries in the ICON executable:
EXTRA_CONFIG_ARGS='--disable-rpaths --disable-mpi-checks --enable-openmp --disable-coupling --enable-dim-swap --enable-fcgroup-O0 --enable-fcgroup-O1 --enable-fcgroup-DIAG'

################################################################################

"${icon_dir}/configure" \
BUILD_ENV="${BUILD_ENV}" \
CC="${CC}" \
CFLAGS="${CFLAGS}" \
CPPFLAGS="${CPPFLAGS}" \
FC="${FC}" \
FCFLAGS="${FCFLAGS}" \
ICON_BUNDLED_CFLAGS="${ICON_BUNDLED_CFLAGS}" \
ICON_CFLAGS="${ICON_CFLAGS}" \
ICON_DIAG_FCFLAGS="${ICON_DIAG_FCFLAGS}" \
ICON_LDFLAGS="${ICON_LDFLAGS}" \
ICON_O0_FCFLAGS="${ICON_O0_FCFLAGS}" \
ICON_O0_PATH="${ICON_O0_PATH}" \
ICON_O1_FCFLAGS="${ICON_O1_FCFLAGS}" \
ICON_O1_PATH="${ICON_O1_PATH}" \
LDFLAGS="${LDFLAGS}" \
LIBS="${LIBS}" \
${EXTRA_CONFIG_ARGS} \
"$@"

for arg in "$@"; do
  case $arg in
    -help | --help | --hel | --he | -h | -help=r* | --help=r* | --hel=r* | --he=r* | -hr* | -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
      test -n "${EXTRA_CONFIG_ARGS}" && echo '' && echo "This wrapper script ('$0') calls the configure script with the following extra arguments, which might override the default values listed above: ${EXTRA_CONFIG_ARGS}"
      exit 0 ;;
  esac
done

# Copy runscript-related files when building out-of-source:
if test $(pwd) != $(cd "${icon_dir}"; pwd); then
  echo "Copying runscript input files from the source directory..."
  rsync -uavz ${icon_dir}/run . --exclude='*.in' --exclude='.*' --exclude='standard_*'
  ln -sf -t run/ ${icon_dir}/run/standard_*
  rsync -uavz ${icon_dir}/externals . --exclude='.git' --exclude='*.f90' --exclude='*.F90' --exclude='*.c' --exclude='*.h' --exclude='*.Po' --exclude='tests' --exclude='*.mod' --exclude='*.o'
  rsync -uavz ${icon_dir}/make_runscripts .
  ln -sf ${icon_dir}/data
  ln -sf ${icon_dir}/vertical_coord_tables
fi

